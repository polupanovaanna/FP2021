# Билет 20. Рекурсивные типы. µ-нотация.

## Создаём алгебру типов
Задаём сумму на ней
Задаём декартово произведение
Изоморфизм типов

## Теперь к рекурсии

```haskell
L = 1 + A + A^2 + A^3 + A^4 + ...
```

Дальше идут вещи от которых Храброву стало бы плохо

```haskell
L = 1 + A*L
```

```haskell
data List a = Nil | Cons a (List a)
```

Рекурсивное уравнение на типы 

```haskell
L = (λX. 1 + A ∗ X) L

L = FIX λX. 1 + A ∗ X
```

L - это некоторая неподвижная точка для данного терма

Для конструкции `FIX λX. T[X]` часто используют обозначение
`µX. T[X]`


Итоговое решение для случая списка записывается теперь так

```haskell
List A = µX. 1 + A ∗ X
```

Ещё примеры решений:

Числа

```haskell
data Nat = Zero | Succ Nat

Nat = µX. 1 + X
```

Деревья

```haskell
data Tree a = Empty | Node a (Tree a) (Tree a)

Tree = λA. µX. 1 + A ∗ X
```











